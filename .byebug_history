exit
dimensions
exit
{scaled_dimensions: scaled_dimensions, bounding_box: bounding_box}
scaled_dimensions
scale_dimensions
exit
    }exit
      scaled_dimensions << (height * ratio).to_i
      scaled_dimensions << (width * ratio).to_i
      ratio = calculate_ratio(width, height)
      height = pair[1]
      width = pair[0]
image_dimensions.each_slice(2) { |pair|
image_dimensions
exit
scale(image_dimensions.split.map(&:to_i), bounding_box.split.map(&:to_i))
scale(image_dimensions.split.map(&:to_i), bounding_box.split.map(&:to_i)
bounding_box.split.map(&:to_i)
bounding_box
image_dimensions.split.map(&:to_i)
image_dimensions
exit
(bounded_width.to_f/width)
width.0
(bounded_width/width).to_i.round(2)
(bounded_width/width).to_i
(bounded_width/width).class
(bounded_width/width).round(2)
(bounded_width/width)
width
bounded_width
bounded_width/width
ratio.round(4)
ratio.round(3)
ratio.round(2)
ratio = (bounded_width/width)
ratio = bounded_width/width
bounded_height
bounded_width
height
width
exit
params[:image_dimensions].split.map(&:to_i)
params[:image_dimensions].split.map(&:to_s)
params[:image_dimensions].split(&:to_i)
params[:image_dimensions].split.to_i
params[:image_dimensions].split
params[:image_dimensions]
params
